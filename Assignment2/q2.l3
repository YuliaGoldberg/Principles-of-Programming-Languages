(define empty?
   (lambda (lst)
      (if (eq? lst '())
          #t
          #f)
  )
)

(define list?
    (lambda (lst)
       (if (empty? lst)
           (empty? lst)
           (if (pair? lst)
               (list? (cdr lst))
                #f
            )
        )
    )
)

(define equal-list?
  (lambda (lst1 lst2)
    (if (and (empty? lst1) (empty? lst2))
        #t
        (if (or (empty? lst1) (empty? lst2)) 
          #f
          (if (and (pair? lst1) (pair? lst2))
            (if (and (list? (car lst1)) (list? (car lst2)))
              (and (equal-list? (cdr lst1) (cdr lst2)) (equal-list? (car lst1) (car lst2)))
              (and (equal-list? (cdr lst1) (cdr lst2)) (eq? (car lst1) (car lst2)))
            )
            #f
          )
        )
    )
  )
)


(define append
  (lambda (lst1 lst2)
    (if(empty? lst1)
     lst2
     (cons (car lst1) (append (cdr lst1) lst2)))
   ))

(define append3
  (lambda (lst1 lst2 num)
      (append (append lst1 lst2) (cons num '()))
    )
)

(define pascal
  (lambda (n)
      (pascal3 (- n 1)  (- n 1))
      )
    )
       
(define pascal2
  (lambda (n r)
    (if (= r 0)
        1
        (if (= r n)
           1
          (+ (pascal2 (- n 1 ) (- r 1)) (pascal2 (- n 1 ) r)))) 
    )
  )

(define pascal3
  (lambda (n r)
    (if (= r 0)
        '(1)
        (append3 '() (append '() (pascal3 n (- r 1))) (pascal2 n r))
        )
    )
  )


